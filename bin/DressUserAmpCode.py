#! /usr/bin/env python3

import argparse 
import re 

def main(): 

    # Parse arguments 
    parser = argparse.ArgumentParser(description = 'Dress Fortran code generated by the user (e.g. with FeynCalc) in order to work with H1jet.', epilog = "Remember to specify the generated file in USERPATH when building H1jet.")

    parser.add_argument('inputfile', nargs = '+', type = str, action = 'append', help = 'Input Fortran code file(s) for dressing') 

    parser.add_argument('-o', '--out', dest = 'outfile', nargs = '?', action = 'store', default = 'user_interface.f90', help = 'Output Fortran code file (default: "user_interface.f90")') 

    args = parser.parse_args()

    # Container for amplitude code lines 
    amplitudelines = [] 

    # Container for born cross section lines 
    xseclines = [] 

    # Variables for channels used 
    channel_gg = False 
    channel_gu = False 
    channel_gd = False 
    channel_gc = False 
    channel_gs = False 
    channel_gb = False 
    channel_gubar = False 
    channel_gdbar = False 
    channel_gcbar = False 
    channel_gsbar = False 
    channel_gbbar = False 
    channel_ug = False 
    channel_uu = False 
    channel_ud = False 
    channel_uc = False 
    channel_us = False 
    channel_ub = False 
    channel_uubar = False 
    channel_udbar = False 
    channel_ucbar = False 
    channel_usbar = False 
    channel_ubbar = False 
    channel_dg = False 
    channel_du = False 
    channel_dd = False 
    channel_dc = False 
    channel_ds = False 
    channel_db = False 
    channel_dubar = False 
    channel_ddbar = False 
    channel_dcbar = False 
    channel_dsbar = False 
    channel_dbbar = False 
    channel_cg = False 
    channel_cu = False 
    channel_cd = False 
    channel_cc = False 
    channel_cs = False 
    channel_cb = False 
    channel_cubar = False 
    channel_cdbar = False 
    channel_ccbar = False 
    channel_csbar = False 
    channel_cbbar = False 
    channel_sg = False 
    channel_su = False 
    channel_sd = False 
    channel_sc = False 
    channel_ss = False 
    channel_sb = False 
    channel_subar = False 
    channel_sdbar = False 
    channel_scbar = False 
    channel_ssbar = False 
    channel_sbbar = False 
    channel_bg = False 
    channel_bu = False 
    channel_bd = False 
    channel_bc = False 
    channel_bs = False 
    channel_bb = False 
    channel_bubar = False 
    channel_bdbar = False 
    channel_bcbar = False 
    channel_bsbar = False 
    channel_bbbar = False 
    channel_ubarg = False 
    channel_ubaru = False 
    channel_ubard = False 
    channel_ubarc = False 
    channel_ubars = False 
    channel_ubarb = False 
    channel_ubarubar = False 
    channel_ubardbar = False 
    channel_ubarcbar = False 
    channel_ubarsbar = False 
    channel_ubarbbar = False 
    channel_dbarg = False 
    channel_dbaru = False 
    channel_dbard = False 
    channel_dbarc = False 
    channel_dbars = False 
    channel_dbarb = False 
    channel_dbarubar = False 
    channel_dbardbar = False 
    channel_dbarcbar = False 
    channel_dbarsbar = False 
    channel_dbarbbar = False 
    channel_cbarg = False 
    channel_cbaru = False 
    channel_cbard = False 
    channel_cbarc = False 
    channel_cbars = False 
    channel_cbarb = False 
    channel_cbarubar = False 
    channel_cbardbar = False 
    channel_cbarcbar = False 
    channel_cbarsbar = False 
    channel_cbarbbar = False 
    channel_sbarg = False 
    channel_sbaru = False 
    channel_sbard = False 
    channel_sbarc = False 
    channel_sbars = False 
    channel_sbarb = False 
    channel_sbarubar = False 
    channel_sbardbar = False 
    channel_sbarcbar = False 
    channel_sbarsbar = False 
    channel_sbarbbar = False 
    channel_bbarg = False 
    channel_bbaru = False 
    channel_bbard = False 
    channel_bbarc = False 
    channel_bbars = False 
    channel_bbarb = False 
    channel_bbarubar = False 
    channel_bbardbar = False 
    channel_bbarcbar = False 
    channel_bbarsbar = False 
    channel_bbarbbar = False 

    # Variables for additional parameters 
    par_nf = False
    par_me = False
    par_mmu = False
    par_mtau = False
    par_mu = False
    par_md = False
    par_mc = False
    par_ms = False
    par_mq = False
    par_mQ = False
    par_mqu = False
    par_mqd = False
    par_ml = False
    par_mpi = False
    par_e_Q = False
    par_Q_u = False
    par_Q_d = False
    par_cosC = False
    par_sinC = False
    par_thetaC = False
    par_Vud = False
    par_cVud = False
    par_Vus = False
    par_cVus = False
    par_Vub = False
    par_cVub = False
    par_Vcd = False
    par_cVcd = False
    par_Vcs = False
    par_cVcs = False
    par_Vcb = False
    par_cVcb = False
    par_Vtd = False
    par_cVtd = False
    par_Vts = False
    par_cVts = False
    par_Vtb = False
    par_cVtb = False
    par_s12 = False
    par_s13 = False
    par_s23 = False
    par_c12 = False
    par_c13 = False
    par_c23 = False

    # Container for found unknown parameters 
    foundparameters = [] 

    higgsMassUsed = False 

    # Container for the level of implementation 
    user_included = "id_missingTotXsec" 

    # Loop over all input files 
    for filelist in args.inputfile: 

        for filename in filelist: 

            print("Reading input from file: " + filename)

            # Open file 
            with open(filename) as inputfile: 

                # Read lines 
                # The generated file is not very large so we can read the entire file at once 
                lines = [line.rstrip('\n') for line in inputfile]

                xsecline = False

                # Loop over lines 
                for i in range(len(lines)):

                    # Remove whitespace to the left 
                    modifiedline = lines[i].lstrip()

                    # Add ampersand if multiple lines 
                    if ((i + 1) < (len(lines))): 
                        # Check if next line is empty 
                        if lines[i+1].strip(): 
                            if ((lines[i+1].lstrip())[0] == '&'): 
                                modifiedline = modifiedline + ' & '

                    # Add appropriate whitespace 
                    if (len(modifiedline) > 0): 
                        if (modifiedline[0] == 'w'): 
                            modifiedline = '    ' + modifiedline 
                        elif (modifiedline[0] == '&'): 
                            modifiedline = '           ' + modifiedline 

                    # Parse line 

                    # Substitute contributions 
                    if (modifiedline.startswith('gg = ')): 
                        channel_gg = True
                        modifiedline = re.sub('gg = ', '    wtgg = wtgg + ', modifiedline) 
                    if (modifiedline.startswith('gu = ')): 
                        channel_gu = True
                        modifiedline = re.sub('gu = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gd = ')): 
                        channel_gd = True
                        modifiedline = re.sub('gd = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gc = ')): 
                        channel_gc = True
                        modifiedline = re.sub('gc = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gs = ')): 
                        channel_gs = True
                        modifiedline = re.sub('gs = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gb = ')): 
                        channel_gb = True
                        modifiedline = re.sub('gb = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gubar = ')): 
                        channel_gubar = True
                        modifiedline = re.sub('gubar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gdbar = ')): 
                        channel_gdbar = True
                        modifiedline = re.sub('gdbar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gcbar = ')): 
                        channel_gcbar = True
                        modifiedline = re.sub('gcbar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gsbar = ')): 
                        channel_gsbar = True
                        modifiedline = re.sub('gsbar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gbbar = ')): 
                        channel_gbbar = True
                        modifiedline = re.sub('gbbar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('ug = ')): 
                        channel_ug = True
                        modifiedline = re.sub('ug = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('uu = ')): 
                        channel_uu = True
                        modifiedline = re.sub('uu = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ud = ')): 
                        channel_ud = True
                        modifiedline = re.sub('ud = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('uc = ')): 
                        channel_uc = True
                        modifiedline = re.sub('uc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('us = ')): 
                        channel_us = True
                        modifiedline = re.sub('us = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ub = ')): 
                        channel_ub = True
                        modifiedline = re.sub('ub = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('uubar = ')): 
                        channel_uubar = True
                        modifiedline = re.sub('uubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('udbar = ')): 
                        channel_udbar = True
                        modifiedline = re.sub('udbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ucbar = ')): 
                        channel_ucbar = True
                        modifiedline = re.sub('ucbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('usbar = ')): 
                        channel_usbar = True
                        modifiedline = re.sub('usbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubbar = ')): 
                        channel_ubbar = True
                        modifiedline = re.sub('ubbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dg = ')): 
                        channel_dg = True
                        modifiedline = re.sub('dg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('du = ')): 
                        channel_du = True
                        modifiedline = re.sub('du = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dd = ')): 
                        channel_dd = True
                        modifiedline = re.sub('dd = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dc = ')): 
                        channel_dc = True
                        modifiedline = re.sub('dc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ds = ')): 
                        channel_ds = True
                        modifiedline = re.sub('ds = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('db = ')): 
                        channel_db = True
                        modifiedline = re.sub('db = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dubar = ')): 
                        channel_dubar = True
                        modifiedline = re.sub('dubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ddbar = ')): 
                        channel_ddbar = True
                        modifiedline = re.sub('ddbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dcbar = ')): 
                        channel_dcbar = True
                        modifiedline = re.sub('dcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dsbar = ')): 
                        channel_dsbar = True
                        modifiedline = re.sub('dsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbbar = ')): 
                        channel_dbbar = True
                        modifiedline = re.sub('dbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cg = ')): 
                        channel_cg = True
                        modifiedline = re.sub('cg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('cu = ')): 
                        channel_cu = True
                        modifiedline = re.sub('cu = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cd = ')): 
                        channel_cd = True
                        modifiedline = re.sub('cd = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cc = ')): 
                        channel_cc = True
                        modifiedline = re.sub('cc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cs = ')): 
                        channel_cs = True
                        modifiedline = re.sub('cs = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cb = ')): 
                        channel_cb = True
                        modifiedline = re.sub('cb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cubar = ')): 
                        channel_cubar = True
                        modifiedline = re.sub('cubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cdbar = ')): 
                        channel_cdbar = True
                        modifiedline = re.sub('cdbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ccbar = ')): 
                        channel_ccbar = True
                        modifiedline = re.sub('ccbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('csbar = ')): 
                        channel_csbar = True
                        modifiedline = re.sub('csbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbbar = ')): 
                        channel_cbbar = True
                        modifiedline = re.sub('cbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sg = ')): 
                        channel_sg = True
                        modifiedline = re.sub('sg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('su = ')): 
                        channel_su = True
                        modifiedline = re.sub('su = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sd = ')): 
                        channel_sd = True
                        modifiedline = re.sub('sd = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sc = ')): 
                        channel_sc = True
                        modifiedline = re.sub('sc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ss = ')): 
                        channel_ss = True
                        modifiedline = re.sub('ss = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sb = ')): 
                        channel_sb = True
                        modifiedline = re.sub('sb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('subar = ')): 
                        channel_subar = True
                        modifiedline = re.sub('subar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sdbar = ')): 
                        channel_sdbar = True
                        modifiedline = re.sub('sdbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('scbar = ')): 
                        channel_scbar = True
                        modifiedline = re.sub('scbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ssbar = ')): 
                        channel_ssbar = True
                        modifiedline = re.sub('ssbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbbar = ')): 
                        channel_sbbar = True
                        modifiedline = re.sub('sbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bg = ')): 
                        channel_bg = True
                        modifiedline = re.sub('bg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('bu = ')): 
                        channel_bu = True
                        modifiedline = re.sub('bu = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bd = ')): 
                        channel_bd = True
                        modifiedline = re.sub('bd = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bc = ')): 
                        channel_bc = True
                        modifiedline = re.sub('bc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bs = ')): 
                        channel_bs = True
                        modifiedline = re.sub('bs = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bb = ')): 
                        channel_bb = True
                        modifiedline = re.sub('bb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bubar = ')): 
                        channel_bubar = True
                        modifiedline = re.sub('bubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bdbar = ')): 
                        channel_bdbar = True
                        modifiedline = re.sub('bdbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bcbar = ')): 
                        channel_bcbar = True
                        modifiedline = re.sub('bcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bsbar = ')): 
                        channel_bsbar = True
                        modifiedline = re.sub('bsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbbar = ')): 
                        channel_bbbar = True
                        modifiedline = re.sub('bbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarg = ')): 
                        channel_ubarg = True
                        modifiedline = re.sub('ubarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('ubaru = ')): 
                        channel_ubaru = True
                        modifiedline = re.sub('ubaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubard = ')): 
                        channel_ubard = True
                        modifiedline = re.sub('ubard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarc = ')): 
                        channel_ubarc = True
                        modifiedline = re.sub('ubarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubars = ')): 
                        channel_ubars = True
                        modifiedline = re.sub('ubars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarb = ')): 
                        channel_ubarb = True
                        modifiedline = re.sub('ubarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarubar = ')): 
                        channel_ubarubar = True
                        modifiedline = re.sub('ubarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubardbar = ')): 
                        channel_ubardbar = True
                        modifiedline = re.sub('ubardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarcbar = ')): 
                        channel_ubarcbar = True
                        modifiedline = re.sub('ubarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarsbar = ')): 
                        channel_ubarsbar = True
                        modifiedline = re.sub('ubarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarbbar = ')): 
                        channel_ubarbbar = True
                        modifiedline = re.sub('ubarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarg = ')): 
                        channel_dbarg = True
                        modifiedline = re.sub('dbarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('dbaru = ')): 
                        channel_dbaru = True
                        modifiedline = re.sub('dbaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbard = ')): 
                        channel_dbard = True
                        modifiedline = re.sub('dbard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarc = ')): 
                        channel_dbarc = True
                        modifiedline = re.sub('dbarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbars = ')): 
                        channel_dbars = True
                        modifiedline = re.sub('dbars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarb = ')): 
                        channel_dbarb = True
                        modifiedline = re.sub('dbarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarubar = ')): 
                        channel_dbarubar = True
                        modifiedline = re.sub('dbarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbardbar = ')): 
                        channel_dbardbar = True
                        modifiedline = re.sub('dbardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarcbar = ')): 
                        channel_dbarcbar = True
                        modifiedline = re.sub('dbarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarsbar = ')): 
                        channel_dbarsbar = True
                        modifiedline = re.sub('dbarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarbbar = ')): 
                        channel_dbarbbar = True
                        modifiedline = re.sub('dbarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarg = ')): 
                        channel_cbarg = True
                        modifiedline = re.sub('cbarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('cbaru = ')): 
                        channel_cbaru = True
                        modifiedline = re.sub('cbaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbard = ')): 
                        channel_cbard = True
                        modifiedline = re.sub('cbard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarc = ')): 
                        channel_cbarc = True
                        modifiedline = re.sub('cbarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbars = ')): 
                        channel_cbars = True
                        modifiedline = re.sub('cbars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarb = ')): 
                        channel_cbarb = True
                        modifiedline = re.sub('cbarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarubar = ')): 
                        channel_cbarubar = True
                        modifiedline = re.sub('cbarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbardbar = ')): 
                        channel_cbardbar = True
                        modifiedline = re.sub('cbardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarcbar = ')): 
                        channel_cbarcbar = True
                        modifiedline = re.sub('cbarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarsbar = ')): 
                        channel_cbarsbar = True
                        modifiedline = re.sub('cbarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarbbar = ')): 
                        channel_cbarbbar = True
                        modifiedline = re.sub('cbarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarg = ')): 
                        channel_sbarg = True
                        modifiedline = re.sub('sbarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('sbaru = ')): 
                        channel_sbaru = True
                        modifiedline = re.sub('sbaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbard = ')): 
                        channel_sbard = True
                        modifiedline = re.sub('sbard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarc = ')): 
                        channel_sbarc = True
                        modifiedline = re.sub('sbarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbars = ')): 
                        channel_sbars = True
                        modifiedline = re.sub('sbars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarb = ')): 
                        channel_sbarb = True
                        modifiedline = re.sub('sbarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarubar = ')): 
                        channel_sbarubar = True
                        modifiedline = re.sub('sbarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbardbar = ')): 
                        channel_sbardbar = True
                        modifiedline = re.sub('sbardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarcbar = ')): 
                        channel_sbarcbar = True
                        modifiedline = re.sub('sbarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarsbar = ')): 
                        channel_sbarsbar = True
                        modifiedline = re.sub('sbarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarbbar = ')): 
                        channel_sbarbbar = True
                        modifiedline = re.sub('sbarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarg = ')): 
                        channel_bbarg = True
                        modifiedline = re.sub('bbarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('bbaru = ')): 
                        channel_bbaru = True
                        modifiedline = re.sub('bbaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbard = ')): 
                        channel_bbard = True
                        modifiedline = re.sub('bbard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarc = ')): 
                        channel_bbarc = True
                        modifiedline = re.sub('bbarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbars = ')): 
                        channel_bbars = True
                        modifiedline = re.sub('bbars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarb = ')): 
                        channel_bbarb = True
                        modifiedline = re.sub('bbarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarubar = ')): 
                        channel_bbarubar = True
                        modifiedline = re.sub('bbarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbardbar = ')): 
                        channel_bbardbar = True
                        modifiedline = re.sub('bbardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarcbar = ')): 
                        channel_bbarcbar = True
                        modifiedline = re.sub('bbarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarsbar = ')): 
                        channel_bbarsbar = True
                        modifiedline = re.sub('bbarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarbbar = ')): 
                        channel_bbarbbar = True
                        modifiedline = re.sub('bbarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('gq = ')): 
                        channel_gu = True
                        channel_gd = True
                        channel_gc = True
                        channel_gs = True
                        channel_gb = True
                        modifiedline = re.sub('gq = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('gqbar = ')): 
                        channel_gubar = True
                        channel_gdbar = True
                        channel_gcbar = True
                        channel_gsbar = True
                        channel_gbbar = True
                        modifiedline = re.sub('gqbar = ', '    wtgq = wtgq + ', modifiedline) 
                    if (modifiedline.startswith('uq = ')): 
                        channel_uu = True
                        channel_ud = True
                        channel_uc = True
                        channel_us = True
                        channel_ub = True
                        modifiedline = re.sub('uq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('uqbar = ')): 
                        channel_uubar = True
                        channel_udbar = True
                        channel_ucbar = True
                        channel_usbar = True
                        channel_ubbar = True
                        modifiedline = re.sub('uqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dq = ')): 
                        channel_du = True
                        channel_dd = True
                        channel_dc = True
                        channel_ds = True
                        channel_db = True
                        modifiedline = re.sub('dq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dqbar = ')): 
                        channel_dubar = True
                        channel_ddbar = True
                        channel_dcbar = True
                        channel_dsbar = True
                        channel_dbbar = True
                        modifiedline = re.sub('dqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cq = ')): 
                        channel_cu = True
                        channel_cd = True
                        channel_cc = True
                        channel_cs = True
                        channel_cb = True
                        modifiedline = re.sub('cq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cqbar = ')): 
                        channel_cubar = True
                        channel_cdbar = True
                        channel_ccbar = True
                        channel_csbar = True
                        channel_cbbar = True
                        modifiedline = re.sub('cqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sq = ')): 
                        channel_su = True
                        channel_sd = True
                        channel_sc = True
                        channel_ss = True
                        channel_sb = True
                        modifiedline = re.sub('sq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sqbar = ')): 
                        channel_subar = True
                        channel_sdbar = True
                        channel_scbar = True
                        channel_ssbar = True
                        channel_sbbar = True
                        modifiedline = re.sub('sqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bq = ')): 
                        channel_bu = True
                        channel_bd = True
                        channel_bc = True
                        channel_bs = True
                        channel_bb = True
                        modifiedline = re.sub('bq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bqbar = ')): 
                        channel_bubar = True
                        channel_bdbar = True
                        channel_bcbar = True
                        channel_bsbar = True
                        channel_bbbar = True
                        modifiedline = re.sub('bqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarq = ')): 
                        channel_ubaru = True
                        channel_ubard = True
                        channel_ubarc = True
                        channel_ubars = True
                        channel_ubarb = True
                        modifiedline = re.sub('ubarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('ubarqbar = ')): 
                        channel_ubarubar = True
                        channel_ubardbar = True
                        channel_ubarcbar = True
                        channel_ubarsbar = True
                        channel_ubarbbar = True
                        modifiedline = re.sub('ubarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarq = ')): 
                        channel_dbaru = True
                        channel_dbard = True
                        channel_dbarc = True
                        channel_dbars = True
                        channel_dbarb = True
                        modifiedline = re.sub('dbarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('dbarqbar = ')): 
                        channel_dbarubar = True
                        channel_dbardbar = True
                        channel_dbarcbar = True
                        channel_dbarsbar = True
                        channel_dbarbbar = True
                        modifiedline = re.sub('dbarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarq = ')): 
                        channel_cbaru = True
                        channel_cbard = True
                        channel_cbarc = True
                        channel_cbars = True
                        channel_cbarb = True
                        modifiedline = re.sub('cbarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('cbarqbar = ')): 
                        channel_cbarubar = True
                        channel_cbardbar = True
                        channel_cbarcbar = True
                        channel_cbarsbar = True
                        channel_cbarbbar = True
                        modifiedline = re.sub('cbarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarq = ')): 
                        channel_sbaru = True
                        channel_sbard = True
                        channel_sbarc = True
                        channel_sbars = True
                        channel_sbarb = True
                        modifiedline = re.sub('sbarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('sbarqbar = ')): 
                        channel_sbarubar = True
                        channel_sbardbar = True
                        channel_sbarcbar = True
                        channel_sbarsbar = True
                        channel_sbarbbar = True
                        modifiedline = re.sub('sbarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarq = ')): 
                        channel_bbaru = True
                        channel_bbard = True
                        channel_bbarc = True
                        channel_bbars = True
                        channel_bbarb = True
                        modifiedline = re.sub('bbarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('bbarqbar = ')): 
                        channel_bbarubar = True
                        channel_bbardbar = True
                        channel_bbarcbar = True
                        channel_bbarsbar = True
                        channel_bbarbbar = True
                        modifiedline = re.sub('bbarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qg = ')): 
                        channel_ug = True
                        channel_dg = True
                        channel_cg = True
                        channel_sg = True
                        channel_bg = True
                        modifiedline = re.sub('qg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('qu = ')): 
                        channel_uu = True
                        channel_du = True
                        channel_cu = True
                        channel_su = True
                        channel_bu = True
                        modifiedline = re.sub('qu = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qd = ')): 
                        channel_ud = True
                        channel_dd = True
                        channel_cd = True
                        channel_sd = True
                        channel_bd = True
                        modifiedline = re.sub('qd = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qc = ')): 
                        channel_uc = True
                        channel_dc = True
                        channel_cc = True
                        channel_sc = True
                        channel_bc = True
                        modifiedline = re.sub('qc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qs = ')): 
                        channel_us = True
                        channel_ds = True
                        channel_cs = True
                        channel_ss = True
                        channel_bs = True
                        modifiedline = re.sub('qs = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qb = ')): 
                        channel_ub = True
                        channel_db = True
                        channel_cb = True
                        channel_sb = True
                        channel_bb = True
                        modifiedline = re.sub('qb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qubar = ')): 
                        channel_uubar = True
                        channel_dubar = True
                        channel_cubar = True
                        channel_subar = True
                        channel_bubar = True
                        modifiedline = re.sub('qubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qdbar = ')): 
                        channel_udbar = True
                        channel_ddbar = True
                        channel_cdbar = True
                        channel_sdbar = True
                        channel_bdbar = True
                        modifiedline = re.sub('qdbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qcbar = ')): 
                        channel_ucbar = True
                        channel_dcbar = True
                        channel_ccbar = True
                        channel_scbar = True
                        channel_bcbar = True
                        modifiedline = re.sub('qcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qsbar = ')): 
                        channel_usbar = True
                        channel_dsbar = True
                        channel_csbar = True
                        channel_ssbar = True
                        channel_bsbar = True
                        modifiedline = re.sub('qsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbbar = ')): 
                        channel_ubbar = True
                        channel_dbbar = True
                        channel_cbbar = True
                        channel_sbbar = True
                        channel_bbbar = True
                        modifiedline = re.sub('qbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qq = ')): 
                        channel_uu = True
                        channel_dd = True
                        channel_cc = True
                        channel_ss = True
                        channel_bb = True
                        modifiedline = re.sub('qq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qqbar = ')): 
                        channel_uubar = True
                        channel_ddbar = True
                        channel_ccbar = True
                        channel_ssbar = True
                        channel_bbbar = True
                        modifiedline = re.sub('qqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarg = ')): 
                        channel_ubarg = True
                        channel_dbarg = True
                        channel_cbarg = True
                        channel_sbarg = True
                        channel_bbarg = True
                        modifiedline = re.sub('qbarg = ', '    wtqg = wtqg + ', modifiedline) 
                    if (modifiedline.startswith('qbaru = ')): 
                        channel_ubaru = True
                        channel_dbaru = True
                        channel_cbaru = True
                        channel_sbaru = True
                        channel_bbaru = True
                        modifiedline = re.sub('qbaru = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbard = ')): 
                        channel_ubard = True
                        channel_dbard = True
                        channel_cbard = True
                        channel_sbard = True
                        channel_bbard = True
                        modifiedline = re.sub('qbard = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarc = ')): 
                        channel_ubarc = True
                        channel_dbarc = True
                        channel_cbarc = True
                        channel_sbarc = True
                        channel_bbarc = True
                        modifiedline = re.sub('qbarc = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbars = ')): 
                        channel_ubars = True
                        channel_dbars = True
                        channel_cbars = True
                        channel_sbars = True
                        channel_bbars = True
                        modifiedline = re.sub('qbars = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarb = ')): 
                        channel_ubarb = True
                        channel_dbarb = True
                        channel_cbarb = True
                        channel_sbarb = True
                        channel_bbarb = True
                        modifiedline = re.sub('qbarb = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarubar = ')): 
                        channel_ubarubar = True
                        channel_dbarubar = True
                        channel_cbarubar = True
                        channel_sbarubar = True
                        channel_bbarubar = True
                        modifiedline = re.sub('qbarubar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbardbar = ')): 
                        channel_ubardbar = True
                        channel_dbardbar = True
                        channel_cbardbar = True
                        channel_sbardbar = True
                        channel_bbardbar = True
                        modifiedline = re.sub('qbardbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarcbar = ')): 
                        channel_ubarcbar = True
                        channel_dbarcbar = True
                        channel_cbarcbar = True
                        channel_sbarcbar = True
                        channel_bbarcbar = True
                        modifiedline = re.sub('qbarcbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarsbar = ')): 
                        channel_ubarsbar = True
                        channel_dbarsbar = True
                        channel_cbarsbar = True
                        channel_sbarsbar = True
                        channel_bbarsbar = True
                        modifiedline = re.sub('qbarsbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarbbar = ')): 
                        channel_ubarbbar = True
                        channel_dbarbbar = True
                        channel_cbarbbar = True
                        channel_sbarbbar = True
                        channel_bbarbbar = True
                        modifiedline = re.sub('qbarbbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarq = ')): 
                        channel_ubaru = True
                        channel_dbard = True
                        channel_cbarc = True
                        channel_sbars = True
                        channel_bbarb = True
                        modifiedline = re.sub('qbarq = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('qbarqbar = ')): 
                        channel_ubarubar = True
                        channel_dbardbar = True
                        channel_cbarcbar = True
                        channel_sbarsbar = True
                        channel_bbarbbar = True
                        modifiedline = re.sub('qbarqbar = ', '    wtqq = wtqq + ', modifiedline) 
                    if (modifiedline.startswith('xsgg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgg = ', '    xsgg = xsgg + ', modifiedline) 
                    if (modifiedline.startswith('xsgu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgu = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgd = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgc = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgs = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgs = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgb = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgubar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgdbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgdbar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgcbar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgsbar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgbbar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsug = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsug = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsuu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsuu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsud = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsud = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsuc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsuc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsus = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsus = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsub = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsub = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsuubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsuubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsudbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsudbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsucbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsucbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsusbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsusbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsdu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdd = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsds = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsds = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsddbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsddbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xscu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscd = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscs = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscs = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscdbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscdbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsccbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsccbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xssu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssd = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsss = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsss = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssdbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssdbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsscbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsscbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsssbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsssbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsbu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbd = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbs = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbs = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbdbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbdbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsubaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsdbaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xscbaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xssbaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsbbaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsgq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgq = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsgqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsgqbar = ', '    xsgq = xsgq + ', modifiedline) 
                    if (modifiedline.startswith('xsuq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsuq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsuqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsuqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsubarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsubarqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsdbarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsdbarqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xscbarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xscbarqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xssbarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xssbarqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsbbarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsbbarqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsqu = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqu = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqd = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqd = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqs = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqs = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqdbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqdbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqqbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarg = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarg = ', '    xsqg = xsqg + ', modifiedline) 
                    if (modifiedline.startswith('xsqbaru = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbaru = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbard = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbard = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarc = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarc = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbars = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbars = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarb = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarb = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarubar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarubar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbardbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbardbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarcbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarcbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarsbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarsbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarbbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarbbar = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarq = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarq = ', '    xsqq = xsqq + ', modifiedline) 
                    if (modifiedline.startswith('xsqbarqbar = ')): 
                        xsecline = True
                        modifiedline = re.sub('xsqbarqbar = ', '    xsqq = xsqq + ', modifiedline) 

                    # Check for any unrecognised channel 
                    if (re.search('=', modifiedline)): 
                        channel = modifiedline[:modifiedline.find("=")].strip() 
                        if (channel != 'wtgg' and channel != 'wtgq' and channel != 'wtqg' and channel != 'wtqq' and channel != 'xsgg' and channel != 'xsgq' and channel != 'xsqg' and channel != 'xsqq'): 
                            print("WARNING: Unrecognised channel found: " + channel) 
                            print("Please only use combinations of g, u, d, c, s, b, ubar, dbar, cbar, sbar, bbar.")
                            print("Examples: gg, gb, bbbar, ubard, ubarubar, ...") 

                    # Check if Higgs mass is there 
                    if (re.search('SMP\("m_H"\)', modifiedline)): 
                        higgsMassUsed = True 

                    # Substitute H1jet parameters 
                    modifiedline = re.sub('SMP\("m_H"\)', 'c_mH', modifiedline) 
                    modifiedline = re.sub('SMP\("m_Z"\)', 'mz_in', modifiedline) 
                    modifiedline = re.sub('SMP\("m_W"\)', 'mw_in', modifiedline) 
                    modifiedline = re.sub('SMP\("m_t"\)', 'mt_in', modifiedline) 
                    modifiedline = re.sub('SMP\("m_b"\)', 'mb_in', modifiedline) 
                    modifiedline = re.sub('SMP\("G_F"\)', 'GF_GeVm2_in', modifiedline) 
                    modifiedline = re.sub('SMP\("sin_W"\)', 'sqrt(sinwsq_in)', modifiedline) # Sign is lost 
                    modifiedline = re.sub('SMP\("cos_W"\)', 'sqrt(one-sinwsq_in)', modifiedline) # Sign is lost 
                    modifiedline = re.sub('SMP\("theta_W"\)', 'asin(sqrt(sinwsq_in))', modifiedline) # Sign is lost 
                    modifiedline = re.sub('SMP\("g_W"\)', '(two*mw_in/higgs_vev_in)', modifiedline) 
                    modifiedline = re.sub('SMP\("g\'_W"\)', '((two*mw_in/higgs_vev_in)*sqrt(sinwsq_in)/sqrt(one-sinwsq_in))', modifiedline) 
                    modifiedline = re.sub('SMP\("g_s"\)', 'sqrt(four*pi*alphas)', modifiedline) 
                    modifiedline = re.sub('SMP\("alpha_s"\)', 'alphas', modifiedline) 
                    modifiedline = re.sub('SMP\("e"\)', '(two*sqrt(sinwsq_in)*mw_in*sqrt(sqrt(two)*GF_GeVm2_in))', modifiedline) 
                    modifiedline = re.sub('SMP\("alpha_fs"\)', '(sqrt(two)*sinwsq_in*mw_in**two*GF_GeVm2_in/pi)', modifiedline) 
                    modifiedline = re.sub('SMP\("g"\)', '(two*sqrt(sinwsq_in)*mw_in*sqrt(sqrt(two)*GF_GeVm2_in))', modifiedline) 

                    # Check for additional SMP parameters 
                    if (re.search('SMP\("N_F"\)', modifiedline)): 
                        par_nf = True
                        modifiedline = re.sub('SMP\("N_F"\)', 'c_nf', modifiedline) 
                    if (re.search('SMP\("m_e"\)', modifiedline)): 
                        par_me = True
                        modifiedline = re.sub('SMP\("m_e"\)', 'c_me', modifiedline) 
                    if (re.search('SMP\("m_mu"\)', modifiedline)): 
                        par_mmu = True
                        modifiedline = re.sub('SMP\("m_mu"\)', 'c_mmu', modifiedline) 
                    if (re.search('SMP\("m_tau"\)', modifiedline)): 
                        par_mtau = True
                        modifiedline = re.sub('SMP\("m_tau"\)', 'c_mtau', modifiedline) 
                    if (re.search('SMP\("m_u"\)', modifiedline)): 
                        par_mu = True
                        modifiedline = re.sub('SMP\("m_u"\)', 'c_mu', modifiedline) 
                    if (re.search('SMP\("m_d"\)', modifiedline)): 
                        par_md = True
                        modifiedline = re.sub('SMP\("m_d"\)', 'c_md', modifiedline) 
                    if (re.search('SMP\("m_c"\)', modifiedline)): 
                        par_mc = True
                        modifiedline = re.sub('SMP\("m_c"\)', 'c_mc', modifiedline) 
                    if (re.search('SMP\("m_s"\)', modifiedline)): 
                        par_ms = True
                        modifiedline = re.sub('SMP\("m_s"\)', 'c_ms', modifiedline) 
                    if (re.search('SMP\("m_q"\)', modifiedline)): 
                        par_mq = True
                        modifiedline = re.sub('SMP\("m_q"\)', 'c_mq', modifiedline) 
                    if (re.search('SMP\("m_Q"\)', modifiedline)): 
                        par_mQ = True
                        modifiedline = re.sub('SMP\("m_Q"\)', 'c_mQ', modifiedline) 
                    if (re.search('SMP\("m_qu"\)', modifiedline)): 
                        par_mqu = True
                        modifiedline = re.sub('SMP\("m_qu"\)', 'c_mqu', modifiedline) 
                    if (re.search('SMP\("m_qd"\)', modifiedline)): 
                        par_mqd = True
                        modifiedline = re.sub('SMP\("m_qd"\)', 'c_mqd', modifiedline) 
                    if (re.search('SMP\("m_l"\)', modifiedline)): 
                        par_ml = True
                        modifiedline = re.sub('SMP\("m_l"\)', 'c_ml', modifiedline) 
                    if (re.search('SMP\("m_pi"\)', modifiedline)): 
                        par_mpi = True
                        modifiedline = re.sub('SMP\("m_pi"\)', 'c_mpi', modifiedline) 
                    if (re.search('SMP\("e_Q"\)', modifiedline)): 
                        par_e_Q = True
                        modifiedline = re.sub('SMP\("e_Q"\)', 'c_e_Q', modifiedline) 
                    if (re.search('SMP\("Q_u"\)', modifiedline)): 
                        par_Q_u = True
                        modifiedline = re.sub('SMP\("Q_u"\)', 'c_Q_u', modifiedline) 
                    if (re.search('SMP\("Q_d"\)', modifiedline)): 
                        par_Q_d = True
                        modifiedline = re.sub('SMP\("Q_d"\)', 'c_Q_d', modifiedline) 
                    if (re.search('SMP\("cos_C"\)', modifiedline)): 
                        par_cosC = True
                        modifiedline = re.sub('SMP\("cos_C"\)', 'c_cosC', modifiedline) 
                    if (re.search('SMP\("sin_C"\)', modifiedline)): 
                        par_sinC = True
                        modifiedline = re.sub('SMP\("sin_C"\)', 'c_sinC', modifiedline) 
                    if (re.search('SMP\("theta_C"\)', modifiedline)): 
                        par_thetaC = True
                        modifiedline = re.sub('SMP\("theta_C"\)', 'c_thetaC', modifiedline) 
                    if (re.search('SMP\("V_ud",\(0.,1.\)\)', modifiedline)): 
                        par_Vud = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vud', modifiedline) 
                    if (re.search('SMP\("V_ud",\(0.,-1.\)\)', modifiedline)): 
                        par_cVud = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVud', modifiedline) 
                    if (re.search('SMP\("V_us",\(0.,1.\)\)', modifiedline)): 
                        par_Vus = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vus', modifiedline) 
                    if (re.search('SMP\("V_us",\(0.,-1.\)\)', modifiedline)): 
                        par_cVus = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVus', modifiedline) 
                    if (re.search('SMP\("V_ub",\(0.,1.\)\)', modifiedline)): 
                        par_Vub = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vub', modifiedline) 
                    if (re.search('SMP\("V_ub",\(0.,-1.\)\)', modifiedline)): 
                        par_cVub = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVub', modifiedline) 
                    if (re.search('SMP\("V_cd",\(0.,1.\)\)', modifiedline)): 
                        par_Vcd = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vcd', modifiedline) 
                    if (re.search('SMP\("V_cd",\(0.,-1.\)\)', modifiedline)): 
                        par_cVcd = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVcd', modifiedline) 
                    if (re.search('SMP\("V_cs",\(0.,1.\)\)', modifiedline)): 
                        par_Vcs = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vcs', modifiedline) 
                    if (re.search('SMP\("V_cs",\(0.,-1.\)\)', modifiedline)): 
                        par_cVcs = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVcs', modifiedline) 
                    if (re.search('SMP\("V_cb",\(0.,1.\)\)', modifiedline)): 
                        par_Vcb = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vcb', modifiedline) 
                    if (re.search('SMP\("V_cb",\(0.,-1.\)\)', modifiedline)): 
                        par_cVcb = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVcb', modifiedline) 
                    if (re.search('SMP\("V_td",\(0.,1.\)\)', modifiedline)): 
                        par_Vtd = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vtd', modifiedline) 
                    if (re.search('SMP\("V_td",\(0.,-1.\)\)', modifiedline)): 
                        par_cVtd = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVtd', modifiedline) 
                    if (re.search('SMP\("V_ts",\(0.,1.\)\)', modifiedline)): 
                        par_Vts = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vts', modifiedline) 
                    if (re.search('SMP\("V_ts",\(0.,-1.\)\)', modifiedline)): 
                        par_cVts = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVts', modifiedline) 
                    if (re.search('SMP\("V_tb",\(0.,1.\)\)', modifiedline)): 
                        par_Vtb = True
                        modifiedline = re.sub('SMP\(""\)', 'c_Vtb', modifiedline) 
                    if (re.search('SMP\("V_tb",\(0.,-1.\)\)', modifiedline)): 
                        par_cVtb = True
                        modifiedline = re.sub('SMP\(""\)', 'c_cVtb', modifiedline) 
                    if (re.search('SMP\("s_12"\)', modifiedline)): 
                        par_s12 = True
                        modifiedline = re.sub('SMP\("s_12"\)', 'c_s12', modifiedline) 
                    if (re.search('SMP\("s_13"\)', modifiedline)): 
                        par_s13 = True
                        modifiedline = re.sub('SMP\("s_13"\)', 'c_s13', modifiedline) 
                    if (re.search('SMP\("s_23"\)', modifiedline)): 
                        par_s23 = True
                        modifiedline = re.sub('SMP\("s_23"\)', 'c_s23', modifiedline) 
                    if (re.search('SMP\("c_12"\)', modifiedline)): 
                        par_c12 = True
                        modifiedline = re.sub('SMP\("c_12"\)', 'c_c12', modifiedline) 
                    if (re.search('SMP\("c_13"\)', modifiedline)): 
                        par_c13 = True
                        modifiedline = re.sub('SMP\("c_13"\)', 'c_c13', modifiedline) 
                    if (re.search('SMP\("c_23"\)', modifiedline)): 
                        par_c23 = True
                        modifiedline = re.sub('SMP\("c_23"\)', 'c_c23', modifiedline) 

                    # Find all unknown parameters, i.e. not SMP parameters 
                    currentline = lines[i]
                    # Remove "=" and everything left of it 
                    currentline = currentline[currentline.find('=')+1:] 
                    # Remove all "SMP(...)" 
                    currentline = re.sub(r'SMP\("(.*?)"\)', '', currentline) 
                    # Find all "words" 
                    currentlinewords = re.findall(r'\w+', currentline) 
                    # Loop over all found "words"
                    for word in currentlinewords: 
                        # Ignore all "s", "t", and "u" 
                        if (word != 's' and word != 't' and word != 'u'): 
                            # If not a digit 
                            if (word.isdigit() == False): 
                                # If parameter has not already been saved 
                                if ('c_' + word not in foundparameters): 
                                    # Save the found parameter 
                                    foundparameters.append('c_' + word) 
                    # Modify the line with all the new parameters 
                    for foundpar in foundparameters: 
                        modifiedline = re.sub(foundpar[2:], foundpar, modifiedline) 

                    # Check if the line is over 80 chars 
                    #if (len(modifiedline) > 80): 
                    #    modifiedline = modifiedline[:70] + ' & \n' + '           & ' + modifiedline[70:] 

                    # Add the modified line to the final output 
                    if (len(modifiedline) > 0): 
                        if (xsecline == True): 
                            xseclines.append(modifiedline)
                        else: 
                            amplitudelines.append(modifiedline)

                if (xsecline == True): 
                    user_included = "id_fullImplementation" 

    # Containers for additional parameters 
    par_declarations = [] 
    par_definitions = [] 
    par_message = [] 

    # Add the Higgs mass if used 
    if (higgsMassUsed == True): 
        par_declarations.append("    real(dp) :: c_mH")
        par_definitions.append("    c_mH = dble_val_opt('--mH', mh) ! Higgs mass")

    # Additional SMP parameters 
    if (par_nf): 
        par_declarations.append("    integer :: c_nf")
        par_definitions.append("    c_nf = int_val_opt('--c_nf', 5)")
        par_message.append("  --c_nf <value>        Number of flavours (user), default = 5")
    if (par_me): 
        par_declarations.append("    real(dp) :: c_me")
        par_definitions.append("    c_me = dble_val_opt('--c_me', 5.11e-4_dp)")
        par_message.append("  --c_me <value>        Electron mass [GeV] (user), default = 5.11e-4")
    if (par_mmu): 
        par_declarations.append("    real(dp) :: c_mmu")
        par_definitions.append("    c_mmu = dble_val_opt('--c_mmu', 0.106_dp)")
        par_message.append("  --c_mmu <value>       Muon mass [GeV] (user), default = 0.106")
    if (par_mtau): 
        par_declarations.append("    real(dp) :: c_mtau")
        par_definitions.append("    c_mtau = dble_val_opt('--c_mtau', 1.776_dp)")
        par_message.append("  --c_mtau <value>      Tau mass [GeV] (user), default = 1.776")
    if (par_mu): 
        par_declarations.append("    real(dp) :: c_mu")
        par_definitions.append("    c_mu = dble_val_opt('--c_mu', 0.0_dp)")
        par_message.append("  --c_mu <value>        Up quark mass [GeV] (user), default = 0")
    if (par_md): 
        par_declarations.append("    real(dp) :: c_md")
        par_definitions.append("    c_md = dble_val_opt('--c_md', 0.0_dp)")
        par_message.append("  --c_md <value>        Down quark mass [GeV] (user), default = 0")
    if (par_mc): 
        par_declarations.append("    real(dp) :: c_mc")
        par_definitions.append("    c_mc = dble_val_opt('--c_mc', 1.275_dp)")
        par_message.append("  --c_mc <value>        Charm quark mass [GeV] (user), default = 1.275")
    if (par_ms): 
        par_declarations.append("    real(dp) :: c_ms")
        par_definitions.append("    c_ms = dble_val_opt('--c_ms', 0.0_dp)")
        par_message.append("  --c_ms <value>        Strange quark mass [GeV] (user), default = 0")
    if (par_mq): 
        par_declarations.append("    real(dp) :: c_mq")
        par_definitions.append("    c_mq = dble_val_opt('--c_mq', 0.0_dp)")
        par_message.append("  --c_mq <value>        Quark mass [GeV] (user), default = 0")
    if (par_mQ): 
        par_declarations.append("    real(dp) :: c_mQ")
        par_definitions.append("    c_mQ = dble_val_opt('--c_mQ', 0.0_dp)")
        par_message.append("  --c_mQ <value>        Quark mass [GeV] (user), default = 0")
    if (par_mqu): 
        par_declarations.append("    real(dp) :: c_mqu")
        par_definitions.append("    c_mqu = dble_val_opt('--c_mqu', 0.0_dp)")
        par_message.append("  --c_mqu <value>       Up-type quark mass [GeV] (user), default = 0")
    if (par_mqd): 
        par_declarations.append("    real(dp) :: c_mqd")
        par_definitions.append("    c_mqd = dble_val_opt('--c_mqd', 0.0_dp)")
        par_message.append("  --c_mqd <value>       Down-type quark mass [GeV] (user), default = 0")
    if (par_ml): 
        par_declarations.append("    real(dp) :: c_ml")
        par_definitions.append("    c_ml = dble_val_opt('--c_ml', 0.0_dp)")
        par_message.append("  --c_ml <value>        Lepton mass [GeV] (user), default = 0")
    if (par_mpi): 
        par_declarations.append("    real(dp) :: c_mpi")
        par_definitions.append("    c_mpi = dble_val_opt('--c_mpi', 135.0_dp)")
        par_message.append("  --c_mpi <value>       Pion mass [GeV] (user), default = 135.0")
    if (par_e_Q): 
        par_declarations.append("    real(dp) :: c_e_Q")
        par_definitions.append("    c_e_Q = dble_val_opt('--c_e_Q', 0.66666667_dp)")
        par_message.append("  --c_e_Q <value>       Electric charge of quark (user), default = 2/3")
    if (par_Q_u): 
        par_declarations.append("    real(dp) :: c_Q_u")
        par_definitions.append("    c_Q_u = dble_val_opt('--c_Q_u', 0.66666667_dp)")
        par_message.append("  --c_Q_u <value>       Up-quark charge (user), default = 2/3")
    if (par_Q_d): 
        par_declarations.append("    real(dp) :: c_Q_d")
        par_definitions.append("    c_Q_d = dble_val_opt('--c_Q_d', -0.33333333_dp)")
        par_message.append("  --c_Q_d <value>       Down-quark charge (user), default = -1/3")
    if (par_cosC): 
        par_declarations.append("    real(dp) :: c_cosC")
        par_definitions.append("    c_cosC = dble_val_opt('--c_cosC', 0.98_dp)")
        par_message.append("  --c_cosC <value>      Cosine of Cabibbo angle (user), default = 0.98")
    if (par_sinC): 
        par_declarations.append("    real(dp) :: c_sinC")
        par_definitions.append("    c_sinC = dble_val_opt('--c_sinC', 0.22_dp)")
        par_message.append("  --c_sinC <value>      Sine of Cabibbo angle (user), default = 0.22")
    if (par_thetaC): 
        par_declarations.append("    real(dp) :: c_thetaC")
        par_definitions.append("    c_thetaC = dble_val_opt('--c_thetaC', 0.22_dp)")
        par_message.append("  --c_thetaC <value>    Cabibbo angle (user), default = 0.22")
    if (par_Vud): 
        par_declarations.append("    real(dp) :: c_Vud")
        par_definitions.append("    c_Vud = dble_val_opt('--c_Vud', 1.0_dp)")
        par_message.append("  --c_Vud <value>       CKM ud real part (user), default = 1")
    if (par_cVud): 
        par_declarations.append("    real(dp) :: c_cVud")
        par_definitions.append("    c_cVud = dble_val_opt('--c_cVud', 0.0_dp)")
        par_message.append("  --c_cVud <value>      CKM ud imaginary part (user), default = 0")
    if (par_Vus): 
        par_declarations.append("    real(dp) :: c_Vus")
        par_definitions.append("    c_Vus = dble_val_opt('--c_Vus', 0.0_dp)")
        par_message.append("  --c_Vus <value>       CKM us real part (user), default = 0")
    if (par_cVus): 
        par_declarations.append("    real(dp) :: c_cVus")
        par_definitions.append("    c_cVus = dble_val_opt('--c_cVus', 0.0_dp)")
        par_message.append("  --c_cVus <value>      CKM us imaginary part (user), default = 0")
    if (par_Vub): 
        par_declarations.append("    real(dp) :: c_Vub")
        par_definitions.append("    c_Vub = dble_val_opt('--c_Vub', 0.0_dp)")
        par_message.append("  --c_Vub <value>       CKM ub real part (user), default = 0")
    if (par_cVub): 
        par_declarations.append("    real(dp) :: c_cVub")
        par_definitions.append("    c_cVub = dble_val_opt('--c_cVub', 0.0_dp)")
        par_message.append("  --c_cVub <value>      CKM ub imaginary part (user), default = 0")
    if (par_Vcd): 
        par_declarations.append("    real(dp) :: c_Vcd")
        par_definitions.append("    c_Vcd = dble_val_opt('--c_Vcd', 0.0_dp)")
        par_message.append("  --c_Vcd <value>       CKM cd real part (user), default = 0")
    if (par_cVcd): 
        par_declarations.append("    real(dp) :: c_cVcd")
        par_definitions.append("    c_cVcd = dble_val_opt('--c_cVcd', 0.0_dp)")
        par_message.append("  --c_cVcd <value>      CKM cd imaginary part (user), default = 0")
    if (par_Vcs): 
        par_declarations.append("    real(dp) :: c_Vcs")
        par_definitions.append("    c_Vcs = dble_val_opt('--c_Vcs', 1.0_dp)")
        par_message.append("  --c_Vcs <value>       CKM cs real part (user), default = 1")
    if (par_cVcs): 
        par_declarations.append("    real(dp) :: c_cVcs")
        par_definitions.append("    c_cVcs = dble_val_opt('--c_cVcs', 0.0_dp)")
        par_message.append("  --c_cVcs <value>      CKM cs imaginary part (user), default = 0")
    if (par_Vcb): 
        par_declarations.append("    real(dp) :: c_Vcb")
        par_definitions.append("    c_Vcb = dble_val_opt('--c_Vcb', 0.0_dp)")
        par_message.append("  --c_Vcb <value>       CKM cb real part (user), default = 0")
    if (par_cVcb): 
        par_declarations.append("    real(dp) :: c_cVcb")
        par_definitions.append("    c_cVcb = dble_val_opt('--c_cVcb', 0.0_dp)")
        par_message.append("  --c_cVcb <value>      CKM cb imaginary part (user), default = 0")
    if (par_Vtd): 
        par_declarations.append("    real(dp) :: c_Vtd")
        par_definitions.append("    c_Vtd = dble_val_opt('--c_Vtd', 0.0_dp)")
        par_message.append("  --c_Vtd <value>       CKM td real part (user), default = 0")
    if (par_cVtd): 
        par_declarations.append("    real(dp) :: c_cVtd")
        par_definitions.append("    c_cVtd = dble_val_opt('--c_cVtd', 0.0_dp)")
        par_message.append("  --c_cVtd <value>      CKM td imaginary part (user), default = 0")
    if (par_Vts): 
        par_declarations.append("    real(dp) :: c_Vts")
        par_definitions.append("    c_Vts = dble_val_opt('--c_Vts', 0.0_dp)")
        par_message.append("  --c_Vts <value>       CKM ts real part (user), default = 0")
    if (par_cVts): 
        par_declarations.append("    real(dp) :: c_cVts")
        par_definitions.append("    c_cVts = dble_val_opt('--c_cVts', 0.0_dp)")
        par_message.append("  --c_cVts <value>      CKM ts imaginary part (user), default = 0")
    if (par_Vtb): 
        par_declarations.append("    real(dp) :: c_Vtb")
        par_definitions.append("    c_Vtb = dble_val_opt('--c_Vtb', 1.0_dp)")
        par_message.append("  --c_Vtb <value>       CKM tb real part (user), default = 1")
    if (par_cVtb): 
        par_declarations.append("    real(dp) :: c_cVtb")
        par_definitions.append("    c_cVtb = dble_val_opt('--c_cVtb', 0.0_dp)")
        par_message.append("  --c_cVtb <value>      CKM tb imaginary part (user), default = 0")
    if (par_s12): 
        par_declarations.append("    real(dp) :: c_s12")
        par_definitions.append("    c_s12 = dble_val_opt('--c_s12', 0.23_dp)")
        par_message.append("  --c_s12 <value>       Sine of 12 Euler angle (user), default = 0.23")
    if (par_s13): 
        par_declarations.append("    real(dp) :: c_s13")
        par_definitions.append("    c_s13 = dble_val_opt('--c_s13', 0.0035_dp)")
        par_message.append("  --c_s13 <value>       Sine of 13 Euler angle (user), default = 0.0035")
    if (par_s23): 
        par_declarations.append("    real(dp) :: c_s23")
        par_definitions.append("    c_s23 = dble_val_opt('--c_s23', 0.042_dp)")
        par_message.append("  --c_s23 <value>       Sine of 23 Euler angle (user), default = 0.042")
    if (par_c12): 
        par_declarations.append("    real(dp) :: c_c12")
        par_definitions.append("    c_c12 = dble_val_opt('--c_c12', 0.97_dp)")
        par_message.append("  --c_c12 <value>       Cosine of 12 Euler angle (user), default = 0.97")
    if (par_c13): 
        par_declarations.append("    real(dp) :: c_c13")
        par_definitions.append("    c_c13 = dble_val_opt('--c_c13', 1.0_dp)")
        par_message.append("  --c_c13 <value>       Cosine of 13 Euler angle (user), default = 1")
    if (par_c23): 
        par_declarations.append("    real(dp) :: c_c23")
        par_definitions.append("    c_c23 = dble_val_opt('--c_c23', 0.999_dp)")
        par_message.append("  --c_c23 <value>       Cosine of 23 Euler angle (user), default = 0.999")

    # Additional unknown parameters 
    for unknownpar in foundparameters: 
        # Some "unknown" parameters, we can give a good guess for 
        if (unknownpar == 'c_CF'): 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = dble_val_opt('--" + unknownpar + "', cf)") 
            par_message.append("  --" + unknownpar + " <value>         QCD colour-factor C_F, default = 4/3")
        elif (unknownpar == 'c_CA'): 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = dble_val_opt('--" + unknownpar + "', ca)") 
            par_message.append("  --" + unknownpar + " <value>         QCD colour-factor C_A, default = 3")
        elif (unknownpar == 'c_SUNN'): 
            par_declarations.append("    integer :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = int_val_opt('--" + unknownpar + "', 3)") 
            par_message.append("  --" + unknownpar + " <value>       Number of colours, default = 3")
        elif (unknownpar == 'c_Nf'): 
            par_declarations.append("    integer :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = int_val_opt('--" + unknownpar + "', nf_int)") 
            par_message.append("  --" + unknownpar + " <value>         Number of flavours, default = 5")
        elif (unknownpar == 'c_TR'): 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = dble_val_opt('--" + unknownpar + "', tr)") 
            par_message.append("  --" + unknownpar + " <value>         QCD colour-factor T_R, default = 0.5")
        elif (unknownpar == 'c_Tf'): 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = dble_val_opt('--" + unknownpar + "', tf)") 
            par_message.append("  --" + unknownpar + " <value>         QCD parameter, T_f = T_R * nf, default = 2.5")
        elif (unknownpar == 'c_vev'): 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = higgs_vev_in") 
        else: 
            par_declarations.append("    real(dp) :: " + unknownpar)
            par_definitions.append("    " + unknownpar + " = dble_val_opt('--" + unknownpar + "', 1.0_dp)") 
            spacelength = 12 - len(unknownpar) 
            if (spacelength < 0): 
                spacelength = 0 
            par_message.append("  --" + unknownpar + " <value> " + (" " * spacelength) + "User parameter (proc = user), default = 1.0")

    # Container for luminosity code lines 
    lumilines = [] 

    # Luminosities 
    if (channel_gg == True): 
        lumilines.append('    lumi_gg = lumi_gg + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_g))') 
    if (channel_gu == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_u))') 
    if (channel_gd == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_d))') 
    if (channel_gc == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_c))') 
    if (channel_gs == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_s))') 
    if (channel_gb == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, iflv_b))') 
    if (channel_gubar == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, -iflv_u))') 
    if (channel_gdbar == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, -iflv_d))') 
    if (channel_gcbar == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, -iflv_c))') 
    if (channel_gsbar == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, -iflv_s))') 
    if (channel_gbbar == True): 
        lumilines.append('    lumi_gq = lumi_gq + PartonLuminosity(grid, pdf1(:, iflv_g), pdf2(:, -iflv_b))') 
    if (channel_ug == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_g))') 
    if (channel_uu == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_u))') 
    if (channel_ud == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_d))') 
    if (channel_uc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_c))') 
    if (channel_us == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_s))') 
    if (channel_ub == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, iflv_b))') 
    if (channel_uubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, -iflv_u))') 
    if (channel_udbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, -iflv_d))') 
    if (channel_ucbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, -iflv_c))') 
    if (channel_usbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, -iflv_s))') 
    if (channel_ubbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_u), pdf2(:, -iflv_b))') 
    if (channel_dg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_g))') 
    if (channel_du == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_u))') 
    if (channel_dd == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_d))') 
    if (channel_dc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_c))') 
    if (channel_ds == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_s))') 
    if (channel_db == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, iflv_b))') 
    if (channel_dubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, -iflv_u))') 
    if (channel_ddbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, -iflv_d))') 
    if (channel_dcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, -iflv_c))') 
    if (channel_dsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, -iflv_s))') 
    if (channel_dbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_d), pdf2(:, -iflv_b))') 
    if (channel_cg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_g))') 
    if (channel_cu == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_u))') 
    if (channel_cd == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_d))') 
    if (channel_cc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_c))') 
    if (channel_cs == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_s))') 
    if (channel_cb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, iflv_b))') 
    if (channel_cubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, -iflv_u))') 
    if (channel_cdbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, -iflv_d))') 
    if (channel_ccbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, -iflv_c))') 
    if (channel_csbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, -iflv_s))') 
    if (channel_cbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_c), pdf2(:, -iflv_b))') 
    if (channel_sg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_g))') 
    if (channel_su == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_u))') 
    if (channel_sd == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_d))') 
    if (channel_sc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_c))') 
    if (channel_ss == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_s))') 
    if (channel_sb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, iflv_b))') 
    if (channel_subar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, -iflv_u))') 
    if (channel_sdbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, -iflv_d))') 
    if (channel_scbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, -iflv_c))') 
    if (channel_ssbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, -iflv_s))') 
    if (channel_sbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_s), pdf2(:, -iflv_b))') 
    if (channel_bg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_g))') 
    if (channel_bu == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_u))') 
    if (channel_bd == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_d))') 
    if (channel_bc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_c))') 
    if (channel_bs == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_s))') 
    if (channel_bb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, iflv_b))') 
    if (channel_bubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, -iflv_u))') 
    if (channel_bdbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, -iflv_d))') 
    if (channel_bcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, -iflv_c))') 
    if (channel_bsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, -iflv_s))') 
    if (channel_bbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, iflv_b), pdf2(:, -iflv_b))') 
    if (channel_ubarg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_g))') 
    if (channel_ubaru == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_u))') 
    if (channel_ubard == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_d))') 
    if (channel_ubarc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_c))') 
    if (channel_ubars == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_s))') 
    if (channel_ubarb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, iflv_b))') 
    if (channel_ubarubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, -iflv_u))') 
    if (channel_ubardbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, -iflv_d))') 
    if (channel_ubarcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, -iflv_c))') 
    if (channel_ubarsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, -iflv_s))') 
    if (channel_ubarbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_u), pdf2(:, -iflv_b))') 
    if (channel_dbarg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_g))') 
    if (channel_dbaru == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_u))') 
    if (channel_dbard == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_d))') 
    if (channel_dbarc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_c))') 
    if (channel_dbars == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_s))') 
    if (channel_dbarb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, iflv_b))') 
    if (channel_dbarubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, -iflv_u))') 
    if (channel_dbardbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, -iflv_d))') 
    if (channel_dbarcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, -iflv_c))') 
    if (channel_dbarsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, -iflv_s))') 
    if (channel_dbarbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_d), pdf2(:, -iflv_b))') 
    if (channel_cbarg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_g))') 
    if (channel_cbaru == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_u))') 
    if (channel_cbard == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_d))') 
    if (channel_cbarc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_c))') 
    if (channel_cbars == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_s))') 
    if (channel_cbarb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, iflv_b))') 
    if (channel_cbarubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, -iflv_u))') 
    if (channel_cbardbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, -iflv_d))') 
    if (channel_cbarcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, -iflv_c))') 
    if (channel_cbarsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, -iflv_s))') 
    if (channel_cbarbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_c), pdf2(:, -iflv_b))') 
    if (channel_sbarg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_g))') 
    if (channel_sbaru == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_u))') 
    if (channel_sbard == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_d))') 
    if (channel_sbarc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_c))') 
    if (channel_sbars == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_s))') 
    if (channel_sbarb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, iflv_b))') 
    if (channel_sbarubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, -iflv_u))') 
    if (channel_sbardbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, -iflv_d))') 
    if (channel_sbarcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, -iflv_c))') 
    if (channel_sbarsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, -iflv_s))') 
    if (channel_sbarbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_s), pdf2(:, -iflv_b))') 
    if (channel_bbarg == True): 
        lumilines.append('    lumi_qg = lumi_qg + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_g))') 
    if (channel_bbaru == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_u))') 
    if (channel_bbard == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_d))') 
    if (channel_bbarc == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_c))') 
    if (channel_bbars == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_s))') 
    if (channel_bbarb == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, iflv_b))') 
    if (channel_bbarubar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, -iflv_u))') 
    if (channel_bbardbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, -iflv_d))') 
    if (channel_bbarcbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, -iflv_c))') 
    if (channel_bbarsbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, -iflv_s))') 
    if (channel_bbarbbar == True): 
        lumilines.append('    lumi_qqbar = lumi_qqbar + PartonLuminosity(grid, pdf1(:, -iflv_b), pdf2(:, -iflv_b))') 

    # Output to file 
    with open(args.outfile, 'w') as outputfile: 
        outputfile.write("!========================================================\n")
        outputfile.write("!--------------------------------------------------------\n")
        outputfile.write("! Module containing the squared matrix element from\n")
        outputfile.write("! included user code for a custom process\n")
        outputfile.write("! Automatically generated with DressUserAmpCode.py\n")
        outputfile.write("!--------------------------------------------------------\n")
        outputfile.write("!========================================================\n")
        outputfile.write("\n")
        outputfile.write("module user_interface\n")
        outputfile.write("\n")
        outputfile.write("  use ew_parameters\n")
        outputfile.write("  use hoppet_v1\n")
        outputfile.write("  use common_vars\n")
        outputfile.write("  use sub_defs_io\n")
        outputfile.write("\n")
        outputfile.write("  implicit none\n")
        outputfile.write("\n")
        outputfile.write("  private\n")
        outputfile.write("\n")
        outputfile.write("  integer, parameter :: idef = selected_int_kind(8)\n")
        outputfile.write("\n")
        outputfile.write("  public :: user_included, user_cross_section, user_Msquared, user_luminosities, &\n")
        outputfile.write("            & user_help_message\n")
        outputfile.write("\n")
        outputfile.write("contains\n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("! Test function to see if the user interface is set up and included \n")
        outputfile.write("\n")
        outputfile.write("  integer function user_included() \n")
        outputfile.write("\n")
        outputfile.write("    ! id_noImplementation   = user interface has not been set up \n")
        outputfile.write("    ! id_missingTotXsec     = total born-level cross-section not included \n")
        outputfile.write("    ! id_fullImplementation = full implementation \n")
        outputfile.write("    user_included = " + user_included + " \n") 
        outputfile.write("\n")
        outputfile.write("  end function user_included \n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("! Born-level cross-section from the generated user code \n")
        outputfile.write("\n")
        outputfile.write("  function user_cross_section(lumigg, lumiqg, lumigq, lumiqqbar) result(res)\n")
        outputfile.write("\n")
        outputfile.write("    real(dp) :: res\n")
        outputfile.write("    real(dp), intent(in) :: lumigg, lumiqg, lumigq, lumiqqbar \n")
        outputfile.write("    real(dp) :: xsgg, xsqg, xsgq, xsqq \n")
        outputfile.write("\n")
        outputfile.write("    ! New parameter declarations\n")
        for i in par_declarations: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("    ! New parameter definitions\n")
        for i in par_definitions: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("    ! Initial values\n")
        outputfile.write("    xsgg = 0.0_dp\n")
        outputfile.write("    xsqg = 0.0_dp\n")
        outputfile.write("    xsgq = 0.0_dp\n")
        outputfile.write("    xsqq = 0.0_dp\n")
        outputfile.write("\n")
        outputfile.write("    ! Born cross section\n")
        for i in xseclines: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("    res = xsgg * lumigg + xsqg * lumiqg + xsgq * lumigq + xsqq * lumiqqbar \n")
        outputfile.write("    res = res * invGev2_to_nb \n")
        outputfile.write("\n")
        outputfile.write("  end function user_cross_section \n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("! Squared matrix element from the generated user code\n")
        outputfile.write("\n")
        outputfile.write("  subroutine user_Msquared(s, t, u, wtqq, wtqg, wtgq, wtgg)\n")
        outputfile.write("\n")
        outputfile.write("    real(dp), intent(in) :: s, t, u ! Input\n")
        outputfile.write("    real(dp), intent(out) :: wtqq, wtqg, wtgq, wtgg ! Output\n")
        outputfile.write("\n")
        outputfile.write("    ! New parameter declarations\n")
        for i in par_declarations: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("    ! New parameter definitions\n")
        for i in par_definitions: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("    ! Initial values\n")
        outputfile.write("    wtqq = 0.0_dp\n")
        outputfile.write("    wtqg = 0.0_dp\n")
        outputfile.write("    wtgq = 0.0_dp\n")
        outputfile.write("    wtgg = 0.0_dp\n")
        outputfile.write("\n")
        outputfile.write("    ! Squared amplitudes\n")
        for i in amplitudelines: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("  end subroutine user_Msquared\n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("! Luminosities for the process from the generated user code\n")
        outputfile.write("\n")
        outputfile.write("  subroutine user_luminosities(grid, pdf1, pdf2, lumi_gg, lumi_qg, lumi_gq, lumi_qqbar)\n")
        outputfile.write("\n")
        outputfile.write("    type(grid_def), intent(in) :: grid\n")
        outputfile.write("    real(dp), intent(in) :: pdf1(0:grid%ny,-6:7), pdf2(0:grid%ny,-6:7)\n")
        outputfile.write("    real(dp), intent(inout) :: lumi_gg(0:), lumi_qg(0:), lumi_gq(0:), lumi_qqbar(0:)\n")
        outputfile.write("\n")
        outputfile.write("    ! Initial values\n") 
        outputfile.write("    lumi_gg = 0.0_dp \n")
        outputfile.write("    lumi_gq = 0.0_dp \n")
        outputfile.write("    lumi_qg = 0.0_dp \n")
        outputfile.write("    lumi_qqbar = 0.0_dp \n")
        outputfile.write("\n")
        outputfile.write("    ! Luminosities\n")
        for i in lumilines: 
            outputfile.write(i + "\n")
        outputfile.write("\n")
        outputfile.write("  end subroutine user_luminosities\n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("! Print any parameter additions to the help message\n")
        outputfile.write("\n")
        outputfile.write("  subroutine user_help_message\n")
        outputfile.write("\n")
        if (len(par_message) > 0): 
            for i in par_message: 
                outputfile.write("    write(*,'(a)') '" + i + "'\n")
            outputfile.write("    write(*,'(a)') ! Blank space for cleaner output \n")
        else: 
            outputfile.write("    ! Deliberately empty\n")
        outputfile.write("\n")
        outputfile.write("  end subroutine user_help_message\n")
        outputfile.write("\n")
        outputfile.write("!=======================================================================================\n")
        outputfile.write("\n")
        outputfile.write("end module user_interface\n")
        outputfile.write("\n")
        outputfile.write("\n")

    print("")
    print("Written dressed Fortran code to: " + args.outfile)
    print("")

    # Print message about additional parameters 
    if (len(par_message) > 0): 
        print("The following additional parameters have been added: ")
        for i in par_message: 
            print(i) 

if __name__ == "__main__": 
    main() 
